// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VRICODE.Data;

namespace VRICODE.Data.Migrations
{
    [DbContext(typeof(VRICODEContext))]
    partial class VRICODEContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("VRICODE.Models.Class", b =>
                {
                    b.Property<int>("NidClass")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NamClass")
                        .HasMaxLength(60);

                    b.HasKey("NidClass");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("VRICODE.Models.Problem", b =>
                {
                    b.Property<int>("NidProblem")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DesProblem")
                        .HasMaxLength(4096);

                    b.Property<string>("DesTitle")
                        .HasMaxLength(60);

                    b.HasKey("NidProblem");

                    b.ToTable("Problems");
                });

            modelBuilder.Entity("VRICODE.Models.ProblemClass", b =>
                {
                    b.Property<int>("NidProblem");

                    b.Property<int>("NidClass");

                    b.HasKey("NidProblem", "NidClass");

                    b.HasIndex("NidClass");

                    b.ToTable("ProblemClasses");
                });

            modelBuilder.Entity("VRICODE.Models.ProblemTest", b =>
                {
                    b.Property<int>("NidProblemTest")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DesTestExpectedOutput")
                        .HasMaxLength(512);

                    b.Property<string>("DesTestInput")
                        .HasMaxLength(512);

                    b.Property<bool>("FlgVisibleToUser");

                    b.Property<int>("NidProblem");

                    b.HasKey("NidProblemTest");

                    b.HasIndex("NidProblem");

                    b.ToTable("ProblemTests");
                });

            modelBuilder.Entity("VRICODE.Models.ProblemUser", b =>
                {
                    b.Property<int>("NidProblem");

                    b.Property<int>("NidUser");

                    b.Property<bool>("FlgProblemCleared");

                    b.Property<int>("QtyTries");

                    b.HasKey("NidProblem", "NidUser");

                    b.HasIndex("NidUser");

                    b.ToTable("ProblemUsers");
                });

            modelBuilder.Entity("VRICODE.Models.User", b =>
                {
                    b.Property<int>("NidUser")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DesEmail")
                        .HasMaxLength(256);

                    b.Property<string>("DesPassword")
                        .HasMaxLength(256);

                    b.Property<string>("NamUser");

                    b.HasKey("NidUser");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("VRICODE.Models.UserClass", b =>
                {
                    b.Property<int>("NidUser");

                    b.Property<int>("NidClass");

                    b.Property<int>("UserClassPrivilege");

                    b.HasKey("NidUser", "NidClass");

                    b.HasIndex("NidClass");

                    b.ToTable("UserClasses");
                });

            modelBuilder.Entity("VRICODE.Models.ProblemClass", b =>
                {
                    b.HasOne("VRICODE.Models.Class", "Class")
                        .WithMany("ProblemClasses")
                        .HasForeignKey("NidClass")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VRICODE.Models.Problem", "Problem")
                        .WithMany("ProblemClasses")
                        .HasForeignKey("NidProblem")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("VRICODE.Models.ProblemTest", b =>
                {
                    b.HasOne("VRICODE.Models.Problem", "Problem")
                        .WithMany("ProblemTests")
                        .HasForeignKey("NidProblem")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("VRICODE.Models.ProblemUser", b =>
                {
                    b.HasOne("VRICODE.Models.Problem", "Problem")
                        .WithMany("ProblemUsers")
                        .HasForeignKey("NidProblem")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VRICODE.Models.User", "User")
                        .WithMany("UserProblems")
                        .HasForeignKey("NidUser")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("VRICODE.Models.UserClass", b =>
                {
                    b.HasOne("VRICODE.Models.Class", "Class")
                        .WithMany("UserClasses")
                        .HasForeignKey("NidClass")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VRICODE.Models.User", "User")
                        .WithMany("UserClasses")
                        .HasForeignKey("NidUser")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
